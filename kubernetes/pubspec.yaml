# pubspec.yaml
name: ai_model_sdk
description: SDK for optimizing and using AI models on device with encryption support
version: 1.0.0
homepage: https://github.com/yourusername/ai_model_sdk

environment:
  sdk: ">=2.12.0 <4.0.0"
  flutter: ">=2.0.0"

dependencies:
  flutter:
    sdk: flutter
  http: ^1.1.0
  path_provider: ^2.1.1
  shared_preferences: ^2.2.1
  crypto: ^3.0.3
  encrypt: ^5.0.3
  flutter_secure_storage: ^9.0.0
  tflite_flutter: ^0.10.3

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:
  plugin:
    platforms:
      android:
        package: com.example.ai_model_sdk
        pluginClass: AiModelSdkPlugin
      ios:
        pluginClass: AiModelSdkPlugin

# example/lib/main.dart
import 'package:flutter/material.dart';
import 'package:ai_model_sdk/ai_model_sdk.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late AIModelSDK modelSDK;
  String? result;
  bool isLoading = false;

  @override
  void initState() {
    super.initState();
    initSDK();
  }

  Future<void> initSDK() async {
    modelSDK = AIModelSDK(modelToken: 'your_model_token');
    await modelSDK.initialize();
  }

  Future<void> runInference() async {
    setState(() => isLoading = true);
    try {
      final input = [1.0, 2.0, 3.0];
      final output = await modelSDK.inference(input);
      setState(() => result = output.toString());
    } catch (e) {
      setState(() => result = 'Error: $e');
    } finally {
      setState(() => isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('AI Model SDK Example')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              if (isLoading)
                CircularProgressIndicator()
              else
                ElevatedButton(
                  onPressed: runInference,
                  child: Text('Run Inference'),
                ),
              if (result != null)
                Padding(
                  padding: EdgeInsets.all(16),
                  child: Text('Result: $result'),
                ),
            ],
          ),
        ),
      ),
    );
  }
}